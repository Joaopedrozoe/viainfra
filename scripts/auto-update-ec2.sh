#!/bin/bash

# ==========================================
# AUTO UPDATE EC2 SCRIPT
# WhiteLabel MVP - Automated Git Pull & Deploy
# ==========================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configura√ß√µes
PROJECT_DIR="/opt/whitelabel"
LOG_FILE="$PROJECT_DIR/logs/auto-update.log"
BACKUP_DIR="$PROJECT_DIR/backups"
ROLLBACK_FILE="$PROJECT_DIR/.last_working_commit"

# Fun√ß√£o de log com cores
log() {
    local message="$1"
    local color="${2:-$GREEN}"
    echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] $message${NC}" | tee -a "$LOG_FILE"
}

error() {
    log "‚ùå ERRO: $1" "$RED"
}

warning() {
    log "‚ö†Ô∏è AVISO: $1" "$YELLOW"
}

info() {
    log "‚ÑπÔ∏è INFO: $1" "$BLUE"
}

success() {
    log "‚úÖ $1" "$GREEN"
}

# Fun√ß√£o de erro cr√≠tico
critical_error() {
    error "$1"
    log "üö® Falha cr√≠tica detectada. Iniciando rollback autom√°tico..." "$RED"
    perform_rollback
    exit 1
}

# Fun√ß√£o para criar backup antes da atualiza√ß√£o
create_backup() {
    local backup_name="update_backup_$(date +%Y%m%d_%H%M%S)"
    local backup_path="$BACKUP_DIR/$backup_name"
    
    log "üíæ Criando backup antes da atualiza√ß√£o..." "$BLUE"
    
    mkdir -p "$backup_path"
    
    # Salvar commit atual para rollback
    git rev-parse HEAD > "$ROLLBACK_FILE"
    
    # Backup do banco de dados se estiver rodando
    if docker-compose ps postgres | grep -q "Up"; then
        log "üìä Fazendo backup do banco de dados..."
        docker-compose exec -T postgres pg_dump -U postgres whitelabel_mvp > "$backup_path/database.sql" 2>/dev/null || warning "Falha no backup do banco (pode ser normal se n√£o estiver configurado)"
    fi
    
    # Backup dos arquivos de configura√ß√£o importantes
    [ -f ".env" ] && cp .env "$backup_path/"
    [ -f "docker-compose.yml" ] && cp docker-compose.yml "$backup_path/"
    
    success "Backup criado em: $backup_path"
    echo "$backup_name" > "$PROJECT_DIR/.last_backup"
}

# Fun√ß√£o para realizar rollback
perform_rollback() {
    if [ ! -f "$ROLLBACK_FILE" ]; then
        error "Arquivo de rollback n√£o encontrado. N√£o √© poss√≠vel reverter automaticamente."
        return 1
    fi
    
    local last_commit=$(cat "$ROLLBACK_FILE")
    log "üîÑ Realizando rollback para commit: $last_commit" "$YELLOW"
    
    # Parar servi√ßos
    log "‚èπÔ∏è Parando servi√ßos..."
    docker-compose down || true
    
    # Reverter c√≥digo
    git reset --hard "$last_commit"
    
    # Subir servi√ßos novamente
    log "üöÄ Reiniciando servi√ßos..."
    docker-compose up -d
    
    success "Rollback conclu√≠do!"
}

# Fun√ß√£o para verificar sa√∫de dos servi√ßos
check_services_health() {
    log "üè• Verificando sa√∫de dos servi√ßos..." "$BLUE"
    
    local max_attempts=30
    local attempt=0
    
    # Aguardar um pouco para os servi√ßos iniciarem
    sleep 10
    
    while [ $attempt -lt $max_attempts ]; do
        attempt=$((attempt + 1))
        
        # Verificar backend
        if curl -f -s http://localhost:4000/health >/dev/null 2>&1; then
            success "Backend est√° saud√°vel"
            return 0
        fi
        
        log "Tentativa $attempt/$max_attempts - Aguardando servi√ßos ficarem saud√°veis..." "$YELLOW"
        sleep 10
    done
    
    error "Servi√ßos n√£o ficaram saud√°veis ap√≥s $((max_attempts * 10)) segundos"
    return 1
}

# Fun√ß√£o principal de atualiza√ß√£o
perform_update() {
    local target_branch="$1"
    
    if [ -z "$target_branch" ]; then
        error "Branch n√£o especificada!"
        echo ""
        echo "Uso: $0 <branch>"
        echo "Exemplo: $0 main"
        echo "Exemplo: $0 copilot/fix-193aa104-e81c-49b2-805d-70d71e8cfed8"
        exit 1
    fi
    
    log "üöÄ Iniciando atualiza√ß√£o autom√°tica para branch: $target_branch" "$PURPLE"
    
    # Verificar se estamos no diret√≥rio correto
    if [ ! -f "docker-compose.yml" ]; then
        critical_error "Execute este script a partir do diret√≥rio raiz do projeto (/opt/whitelabel)"
    fi
    
    # Criar backup
    create_backup
    
    # Parar servi√ßos graciosamente
    log "‚èπÔ∏è Parando servi√ßos atuais..." "$BLUE"
    docker-compose down || warning "Alguns servi√ßos podem j√° estar parados"
    
    # Atualizar c√≥digo
    log "üì• Atualizando c√≥digo do reposit√≥rio..." "$BLUE"
    
    # Fetch de todas as branches e tags
    git fetch --all --prune || critical_error "Falha ao fazer fetch do reposit√≥rio"
    
    # Reset hard para a branch especificada
    log "üîÑ Resetando para branch: $target_branch"
    git reset --hard "origin/$target_branch" || critical_error "Falha ao resetar para a branch $target_branch"
    
    # Verificar se h√° mudan√ßas no docker-compose
    if git diff HEAD~1 --name-only | grep -q "docker-compose\|Dockerfile"; then
        log "üê≥ Detectadas mudan√ßas no Docker. Reconstruindo imagens..." "$BLUE"
        docker-compose build --no-cache || critical_error "Falha no build das imagens Docker"
    fi
    
    # Subir servi√ßos
    log "üöÄ Iniciando servi√ßos atualizados..." "$BLUE"
    docker-compose up -d --build || critical_error "Falha ao iniciar os servi√ßos"
    
    # Verificar sa√∫de dos servi√ßos
    if ! check_services_health; then
        critical_error "Servi√ßos n√£o est√£o saud√°veis ap√≥s a atualiza√ß√£o"
    fi
    
    # Limpeza de imagens antigas
    log "üßπ Limpando imagens Docker antigas..." "$BLUE"
    docker image prune -f || warning "Falha na limpeza de imagens antigas"
    
    # Salvar estado atual como √∫ltimo estado funcional
    git rev-parse HEAD > "$ROLLBACK_FILE"
    
    success "Atualiza√ß√£o conclu√≠da com sucesso!"
    log "üìä Aplica√ß√£o dispon√≠vel em: https://$(hostname -I | cut -d' ' -f1 2>/dev/null || echo 'seu-dominio')" "$GREEN"
    log "üîç Para monitorar logs: docker-compose logs -f" "$BLUE"
    log "üìú Log completo em: $LOG_FILE" "$BLUE"
}

# Fun√ß√£o para mostrar status
show_status() {
    echo ""
    log "üìä STATUS DO SISTEMA" "$PURPLE"
    echo ""
    
    # Informa√ß√µes do Git
    log "üîó Branch atual: $(git branch --show-current)" "$BLUE"
    log "üìù √öltimo commit: $(git log -1 --oneline)" "$BLUE"
    
    # Status dos containers
    log "üê≥ Status dos containers:" "$BLUE"
    docker-compose ps
    
    # √öltimo backup
    if [ -f "$PROJECT_DIR/.last_backup" ]; then
        log "üíæ √öltimo backup: $(cat $PROJECT_DIR/.last_backup)" "$BLUE"
    fi
    
    # Espa√ßo em disco
    log "üíø Espa√ßo em disco:" "$BLUE"
    df -h / | tail -1
    
    echo ""
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo ""
    echo -e "${PURPLE}üöÄ AUTO UPDATE EC2 - WhiteLabel MVP${NC}"
    echo ""
    echo -e "${GREEN}DESCRI√á√ÉO:${NC}"
    echo "  Script para automatizar atualiza√ß√µes do c√≥digo e deploy no EC2"
    echo ""
    echo -e "${GREEN}USO:${NC}"
    echo "  $0 <branch>              # Atualizar para uma branch espec√≠fica"
    echo "  $0 --status              # Mostrar status do sistema"
    echo "  $0 --rollback            # Fazer rollback para √∫ltimo estado funcional"
    echo "  $0 --help               # Mostrar esta ajuda"
    echo ""
    echo -e "${GREEN}EXEMPLOS:${NC}"
    echo "  $0 main                                                    # Atualizar para main"
    echo "  $0 develop                                                 # Atualizar para develop"
    echo "  $0 copilot/fix-193aa104-e81c-49b2-805d-70d71e8cfed8      # Atualizar para branch espec√≠fica"
    echo ""
    echo -e "${GREEN}RECURSOS:${NC}"
    echo "  ‚úÖ Backup autom√°tico antes da atualiza√ß√£o"
    echo "  ‚úÖ Rollback autom√°tico em caso de falha"
    echo "  ‚úÖ Verifica√ß√£o de sa√∫de dos servi√ßos"
    echo "  ‚úÖ Rebuild inteligente do Docker"
    echo "  ‚úÖ Logs detalhados"
    echo ""
}

# Criar diret√≥rios necess√°rios
mkdir -p "$PROJECT_DIR/logs"
mkdir -p "$BACKUP_DIR"

# Mudar para o diret√≥rio do projeto
cd "$PROJECT_DIR" 2>/dev/null || {
    error "Diret√≥rio do projeto n√£o encontrado: $PROJECT_DIR"
    echo ""
    echo "Execute primeiro:"
    echo "  sudo mkdir -p $PROJECT_DIR"
    echo "  sudo chown -R \$USER:\$USER $PROJECT_DIR"
    echo "  cd $PROJECT_DIR"
    echo "  git clone <repository-url> ."
    exit 1
}

# Header do script
echo ""
echo -e "${PURPLE}=========================================="
echo "   üöÄ AUTO UPDATE EC2 - WHITELABEL MVP"
echo "==========================================${NC}"
echo ""

# Processar argumentos
case "${1:-}" in
    "--help"|"-h")
        show_help
        ;;
    "--status"|"-s")
        show_status
        ;;
    "--rollback"|"-r")
        log "üîÑ Iniciando rollback manual..." "$YELLOW"
        perform_rollback
        ;;
    "")
        error "Nenhuma a√ß√£o especificada!"
        show_help
        exit 1
        ;;
    *)
        perform_update "$1"
        ;;
esac